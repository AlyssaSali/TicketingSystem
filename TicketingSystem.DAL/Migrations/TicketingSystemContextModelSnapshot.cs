// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingSystem.DAL.Models;

namespace TicketingSystem.DAL.Migrations
{
    [DbContext(typeof(TicketingSystemContext))]
    partial class TicketingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TicketingSystem.DAL.Models.Category", b =>
                {
                    b.Property<Guid>("Categoryid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid?>("Severityid");

                    b.HasKey("Categoryid");

                    b.HasIndex("Severityid");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.CategoryList", b =>
                {
                    b.Property<Guid>("CategoryListid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryListName");

                    b.Property<string>("CategoryType");

                    b.Property<Guid>("Categoryid");

                    b.Property<Guid>("ITGroupid");

                    b.Property<Guid>("Severityid");

                    b.Property<int>("SlaResolvedTime");

                    b.Property<string>("SlaResolvedTimeExt");

                    b.Property<int>("SlaResponseTime");

                    b.Property<string>("SlaResponseTimeExt");

                    b.HasKey("CategoryListid");

                    b.HasIndex("Categoryid");

                    b.HasIndex("ITGroupid");

                    b.HasIndex("Severityid");

                    b.ToTable("CategoryLists");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactInfo");

                    b.Property<string>("EmailAddress");

                    b.Property<Guid>("EmployeeTypeid");

                    b.Property<string>("FirstName");

                    b.Property<string>("FormOfCommu");

                    b.Property<string>("LastName");

                    b.Property<Guid>("Officeid");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmployeeTypeid");

                    b.HasIndex("Officeid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.EmployeeType", b =>
                {
                    b.Property<Guid>("EmployeeTypeid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmployeeTypeName");

                    b.HasKey("EmployeeTypeid");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.GroupEmployee", b =>
                {
                    b.Property<Guid>("GroupEmployeeid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmployeeFullName");

                    b.Property<Guid>("EmployeeID");

                    b.Property<Guid>("ITGroupMemberid");

                    b.HasKey("GroupEmployeeid");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ITGroupMemberid");

                    b.ToTable("GroupEmployees");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.ITGroup", b =>
                {
                    b.Property<Guid>("ITGroupid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ITGroupCode");

                    b.Property<string>("ITGroupName");

                    b.HasKey("ITGroupid");

                    b.ToTable("ITGroups");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.ITGroupMember", b =>
                {
                    b.Property<Guid>("ITGroupMemberid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ITGroupid");

                    b.HasKey("ITGroupMemberid");

                    b.HasIndex("ITGroupid");

                    b.ToTable("ITGroupMembers");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Office", b =>
                {
                    b.Property<Guid>("Officeid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OfficeCode");

                    b.Property<string>("OfficeDesc");

                    b.HasKey("Officeid");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Severity", b =>
                {
                    b.Property<Guid>("Severityid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SeverityCode");

                    b.Property<string>("SeverityDesc");

                    b.Property<string>("SeverityName");

                    b.HasKey("Severityid");

                    b.ToTable("Severities");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Ticket", b =>
                {
                    b.Property<Guid>("Ticketid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<Guid>("CategoryListid");

                    b.Property<Guid?>("Categoryid");

                    b.Property<string>("ContactInfo");

                    b.Property<DateTime>("DateOfRequest");

                    b.Property<Guid>("EmployeeID");

                    b.Property<string>("FormOfCommu");

                    b.Property<Guid>("ITGroupid");

                    b.Property<bool>("IsOpen");

                    b.Property<bool>("IsUrgent");

                    b.Property<Guid>("Officeid");

                    b.Property<string>("RequestDesc");

                    b.Property<string>("RequestTitle");

                    b.Property<DateTime>("ResolveTime");

                    b.Property<DateTime>("ResponseTime");

                    b.Property<string>("Severity");

                    b.Property<Guid?>("Severityid");

                    b.Property<string>("TrackingStatus");

                    b.HasKey("Ticketid");

                    b.HasIndex("CategoryListid");

                    b.HasIndex("Categoryid");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ITGroupid");

                    b.HasIndex("Officeid");

                    b.HasIndex("Severityid");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.TicketMinor", b =>
                {
                    b.Property<Guid>("TicketMinorid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryListid");

                    b.Property<DateTime>("DateAccomplished");

                    b.Property<DateTime>("DateOfRequest");

                    b.Property<string>("Description");

                    b.Property<Guid>("Officeid");

                    b.Property<Guid>("Requesterid");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TimeOfRequest");

                    b.Property<Guid>("WorkByid");

                    b.Property<string>("WorkDone");

                    b.HasKey("TicketMinorid");

                    b.HasIndex("CategoryListid");

                    b.HasIndex("Officeid");

                    b.HasIndex("Requesterid");

                    b.ToTable("TicketMinors");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Category", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Severity")
                        .WithMany("Categories")
                        .HasForeignKey("Severityid");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.CategoryList", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Category", "Category")
                        .WithMany("CategoryLists")
                        .HasForeignKey("Categoryid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("CategoryLists")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Severity", "Severity")
                        .WithMany("CategoryLists")
                        .HasForeignKey("Severityid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Employee", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Office", "Office")
                        .WithMany("Employees")
                        .HasForeignKey("Officeid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.GroupEmployee", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroupMember", "ITGroupMember")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("ITGroupMemberid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.ITGroupMember", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("ITGroupMembers")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Ticket", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.CategoryList", "CategoryList")
                        .WithMany()
                        .HasForeignKey("CategoryListid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Category")
                        .WithMany("Tickets")
                        .HasForeignKey("Categoryid");

                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("Tickets")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("Tickets")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Office", "Office")
                        .WithMany("Tickets")
                        .HasForeignKey("Officeid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Severity")
                        .WithMany("Tickets")
                        .HasForeignKey("Severityid");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.TicketMinor", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.CategoryList", "CategoryList")
                        .WithMany("TicketMinors")
                        .HasForeignKey("CategoryListid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Office", "Office")
                        .WithMany("TicketMinors")
                        .HasForeignKey("Officeid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("TicketMinors")
                        .HasForeignKey("Requesterid")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
