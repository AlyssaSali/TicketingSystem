// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketingSystem.DAL.Models;

namespace TicketingSystem.DAL.Migrations
{
    [DbContext(typeof(TicketingSystemContext))]
    partial class TicketingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Category", b =>
                {
                    b.Property<Guid>("Categoryid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<DateTime>("DateCreated");

                    b.Property<Guid?>("Severityid");

                    b.HasKey("Categoryid");

                    b.HasIndex("Severityid");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.CategoryList", b =>
                {
                    b.Property<Guid>("CategoryListid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryListName");

                    b.Property<string>("CategoryType");

                    b.Property<Guid>("Categoryid");

                    b.Property<Guid>("ITGroupid");

                    b.Property<Guid>("Severityid");

                    b.Property<int>("SlaResolvedTime");

                    b.Property<string>("SlaResolvedTimeExt");

                    b.Property<int>("SlaResponseTime");

                    b.Property<string>("SlaResponseTimeExt");

                    b.HasKey("CategoryListid");

                    b.HasIndex("Categoryid");

                    b.HasIndex("ITGroupid");

                    b.HasIndex("Severityid");

                    b.ToTable("CategoryLists");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeID")
                        .ValueGeneratedOnAdd();

<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
                    b.Property<string>("ContactInfo");

                    b.Property<string>("EmailAddress");

                    b.Property<Guid>("EmployeeTypeid");

                    b.Property<string>("FirstName");

                    b.Property<string>("FormOfCommu");

                    b.Property<string>("LastName");

                    b.Property<Guid>("Officeid");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmployeeTypeid");

                    b.HasIndex("Officeid");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.EmployeeEmployeeType", b =>
                {
                    b.Property<Guid>("EmployeeEmployeeTypeid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EmployeeTypeid");

                    b.HasKey("EmployeeEmployeeTypeid");

                    b.HasIndex("EmployeeTypeid");

                    b.ToTable("EmployeeEmployeeTypes");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.EmployeeType", b =>
                {
                    b.Property<Guid>("EmployeeTypeid")
                        .ValueGeneratedOnAdd();

<<<<<<< HEAD
                    b.Property<string>("EmployeeTypeName");

                    b.HasKey("EmployeeTypeid");
=======
<<<<<<< HEAD
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                    b.Property<string>("ContactInfo");

                    b.Property<string>("EmailAddress");

                    b.Property<Guid>("EmployeeTypeid");

                    b.Property<string>("FirstName");

                    b.Property<string>("FormOfCommu");

                    b.Property<string>("LastName");

                    b.Property<Guid>("Officeid");

                    b.HasKey("EmployeeID");

                    b.HasIndex("EmployeeTypeid");

                    b.HasIndex("Officeid");
>>>>>>> 89bb63c04e1ad5424f19b0fd116240805a791ee4

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.EmployeeType", b =>
                {
                    b.Property<Guid>("EmployeeTypeid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmployeeTypeName");

                    b.HasKey("EmployeeTypeid");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.GroupEmployee", b =>
                {
                    b.Property<Guid>("GroupEmployeeid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmployeeFullName");

                    b.Property<Guid>("EmployeeID");

                    b.Property<Guid>("ITGroupMemberid");

                    b.HasKey("GroupEmployeeid");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ITGroupMemberid");

                    b.ToTable("GroupEmployees");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.ITGroup", b =>
                {
                    b.Property<Guid>("ITGroupid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ITGroupCode");

                    b.Property<string>("ITGroupName");

                    b.HasKey("ITGroupid");

                    b.ToTable("ITGroups");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.ITGroupMember", b =>
                {
                    b.Property<Guid>("ITGroupMemberid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ITGroupid");

                    b.HasKey("ITGroupMemberid");

                    b.HasIndex("ITGroupid");

                    b.ToTable("ITGroupMembers");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Office", b =>
                {
                    b.Property<Guid>("Officeid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("OfficeCode");

                    b.Property<string>("OfficeDesc");

                    b.HasKey("Officeid");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Severity", b =>
                {
                    b.Property<Guid>("Severityid")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SeverityCode");

                    b.Property<string>("SeverityDesc");

                    b.Property<string>("SeverityName");

                    b.HasKey("Severityid");

                    b.ToTable("Severities");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Ticket", b =>
                {
                    b.Property<Guid>("Ticketid")
                        .ValueGeneratedOnAdd();
<<<<<<< HEAD
=======

                    b.Property<string>("Category");

                    b.Property<Guid>("CategoryListid");

                    b.Property<Guid?>("Categoryid");

                    b.Property<string>("ContactInfo");
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2

                    b.Property<DateTime>("DateOfRequest");

                    b.Property<Guid>("EmployeeID");

                    b.Property<string>("IsOpen");

                    b.Property<string>("IsUrgent");

                    b.Property<Guid>("Officeid");

                    b.Property<string>("RequestDesc");

                    b.Property<string>("RequestTitle");

                    b.Property<string>("RequestedBy");

<<<<<<< HEAD
=======
                    b.Property<Guid?>("Severityid");

>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                    b.Property<string>("TrackingStatus");

                    b.HasKey("Ticketid");

<<<<<<< HEAD
=======
                    b.HasIndex("CategoryListid");

                    b.HasIndex("Categoryid");

>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                    b.HasIndex("EmployeeID");

                    b.HasIndex("Officeid");

<<<<<<< HEAD
=======
                    b.HasIndex("Severityid");

>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.TicketMinor", b =>
                {
<<<<<<< HEAD
                    b.Property<Guid>("TicketMinorid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryListid");

                    b.Property<DateTime>("DateOfRequest");

                    b.Property<string>("Description");
=======
<<<<<<< HEAD
                    b.Property<Guid>("TicketMinorid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryListid");
=======
                    b.HasOne("TicketingSystem.DAL.Models.Category", "Category")
                        .WithMany("CategoryLists")
                        .HasForeignKey("categoryid")
                        .OnDelete(DeleteBehavior.Cascade);
=======

                    b.Property<string>("Category");

<<<<<<< HEAD
                    b.Property<Guid>("CategoryListid");

                    b.Property<Guid?>("Categoryid");
=======
                    b.Property<Guid>("Categoryid");
>>>>>>> 2fb85b2afa0a42a16fcb96d7ab04b103ede54f15
>>>>>>> 89bb63c04e1ad5424f19b0fd116240805a791ee4
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7

                    b.Property<DateTime>("DateAccomplished");

                    b.Property<DateTime>("DateOfRequest");

<<<<<<< HEAD
                    b.Property<string>("Description");
=======
                    b.Property<Guid>("EmployeeID");

                    b.Property<string>("FormOfCommu");

                    b.Property<Guid>("ITGroupid");

                    b.Property<bool>("IsOpen");

                    b.Property<bool>("IsUrgent");
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2

                    b.Property<Guid>("Officeid");

                    b.Property<Guid>("Requesterid");

                    b.Property<string>("Status");

<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                    b.Property<DateTime>("TimeOfRequest");

                    b.Property<Guid>("WorkByid");

                    b.Property<string>("WorkDone");

                    b.HasKey("TicketMinorid");

                    b.HasIndex("CategoryListid");
<<<<<<< HEAD

                    b.HasIndex("Officeid");
=======
=======
                    b.Property<DateTime>("ResolveTime");

                    b.Property<DateTime>("ResponseTime");

                    b.Property<string>("Severity");

                    b.Property<Guid?>("Severityid");

                    b.Property<string>("TrackingStatus");
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7

                    b.HasIndex("Officeid");

<<<<<<< HEAD
                    b.HasIndex("Requesterid");

                    b.ToTable("TicketMinors");
                });
=======
                    b.HasIndex("CategoryListid");

                    b.HasIndex("Categoryid");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ITGroupid");

                    b.HasIndex("Officeid");

                    b.HasIndex("Severityid");
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2

                    b.HasIndex("Requesterid");

<<<<<<< HEAD
                    b.ToTable("TicketMinors");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Category", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Severity")
                        .WithMany("Categories")
                        .HasForeignKey("Severityid");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.CategoryList", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Category", "Category")
                        .WithMany("CategoryLists")
                        .HasForeignKey("Categoryid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("CategoryLists")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.Severity", "Severity")
                        .WithMany("CategoryLists")
                        .HasForeignKey("Severityid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

=======
<<<<<<< HEAD
            modelBuilder.Entity("TicketingSystem.DAL.Models.TicketMinor", b =>
=======
<<<<<<< HEAD
<<<<<<< HEAD
            modelBuilder.Entity("TicketingSystem.DAL.Models.Employee", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeid")
                        .OnDelete(DeleteBehavior.Cascade);
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7

            modelBuilder.Entity("TicketingSystem.DAL.Models.Category", b =>
<<<<<<< HEAD
                {
                    b.HasOne("TicketingSystem.DAL.Models.Severity")
                        .WithMany("Categories")
                        .HasForeignKey("Severityid");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.CategoryList", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Category", "Category")
                        .WithMany("CategoryLists")
                        .HasForeignKey("Categoryid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("CategoryLists")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Severity", "Severity")
                        .WithMany("CategoryLists")
                        .HasForeignKey("Severityid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

=======
=======
>>>>>>> 2fb85b2afa0a42a16fcb96d7ab04b103ede54f15
>>>>>>> 89bb63c04e1ad5424f19b0fd116240805a791ee4
                {
                    b.Property<Guid>("TicketMinorid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryListid");

                    b.Property<DateTime>("DateOfRequest");

                    b.Property<string>("Description");

                    b.Property<Guid>("Officeid");

                    b.Property<Guid>("Requesterid");

                    b.Property<string>("Status");

                    b.Property<DateTime>("TimeOfRequest");

                    b.Property<Guid>("WorkByid");

                    b.Property<string>("WorkDone");

                    b.HasKey("TicketMinorid");

                    b.HasIndex("CategoryListid");

                    b.HasIndex("Officeid");

                    b.HasIndex("Requesterid");

                    b.ToTable("TicketMinors");
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.TypeEmployee", b =>
                {
                    b.Property<Guid>("TypeEmployeeid")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("EmployeeEmployeeTypeid");

                    b.Property<string>("EmployeeFullName");

                    b.Property<Guid>("EmployeeID");

<<<<<<< HEAD
                    b.HasKey("TypeEmployeeid");

                    b.HasIndex("EmployeeEmployeeTypeid");
=======
<<<<<<< HEAD
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
            modelBuilder.Entity("TicketingSystem.DAL.Models.Employee", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeid")
<<<<<<< HEAD
                        .OnDelete(DeleteBehavior.Cascade);
=======
                        .OnDelete(DeleteBehavior.Restrict);
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2

                    b.HasOne("TicketingSystem.DAL.Models.Office", "Office")
                        .WithMany("Employees")
                        .HasForeignKey("Officeid")
<<<<<<< HEAD
                        .OnDelete(DeleteBehavior.Cascade);
=======
                        .OnDelete(DeleteBehavior.Restrict);
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.GroupEmployee", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("EmployeeID")
<<<<<<< HEAD
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroupMember", "ITGroupMember")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("ITGroupMemberid")
                        .OnDelete(DeleteBehavior.Restrict);
=======
                        .OnDelete(DeleteBehavior.Cascade);
>>>>>>> 89bb63c04e1ad5424f19b0fd116240805a791ee4

                    b.HasIndex("EmployeeID");

                    b.ToTable("TypeEmployees");
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7
                });

<<<<<<< HEAD
            modelBuilder.Entity("TicketingSystem.DAL.Models.User", b =>
=======
            modelBuilder.Entity("TicketingSystem.DAL.Models.ITGroupMember", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("ITGroupMembers")
                        .HasForeignKey("ITGroupid")
<<<<<<< HEAD
                        .OnDelete(DeleteBehavior.Restrict);
=======
                        .OnDelete(DeleteBehavior.Cascade);
<<<<<<< HEAD
=======
>>>>>>> 63171424717892a87f2f85c43afeee8014c441ad
=======
            modelBuilder.Entity("TicketingSystem.DAL.Models.TicketMinor", b =>
>>>>>>> 89bb63c04e1ad5424f19b0fd116240805a791ee4
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Answer");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Question");

                    b.Property<Guid>("Userid");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Category", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Severity")
                        .WithMany("Categories")
                        .HasForeignKey("Severityid");
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Ticket", b =>
                {
<<<<<<< HEAD
                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("Tickets")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.Office", "Office")
                        .WithMany("Tickets")
                        .HasForeignKey("Officeid")
                        .OnDelete(DeleteBehavior.Cascade);
=======
<<<<<<< HEAD
                    b.HasOne("TicketingSystem.DAL.Models.CategoryList", "CategoryList")
                        .WithMany()
                        .HasForeignKey("CategoryListid")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.Category")
                        .WithMany("Tickets")
                        .HasForeignKey("Categoryid");

                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("Tickets")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("Tickets")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Restrict);

=======
                    b.HasOne("TicketingSystem.DAL.Models.Category", "Category")
                        .WithMany("CategoryLists")
                        .HasForeignKey("Categoryid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("CategoryLists")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.Severity", "Severity")
                        .WithMany("CategoryLists")
                        .HasForeignKey("Severityid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Employee", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeid")
                        .OnDelete(DeleteBehavior.Cascade);

>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7
                    b.HasOne("TicketingSystem.DAL.Models.Office", "Office")
                        .WithMany("Tickets")
                        .HasForeignKey("Officeid")
<<<<<<< HEAD
                        .OnDelete(DeleteBehavior.Restrict);
=======
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.EmployeeEmployeeType", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.GroupEmployee", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroupMember", "ITGroupMember")
                        .WithMany("GroupEmployees")
                        .HasForeignKey("ITGroupMemberid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.ITGroupMember", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("ITGroupMembers")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.Ticket", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.CategoryList", "CategoryList")
                        .WithMany()
                        .HasForeignKey("CategoryListid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.Category")
                        .WithMany("Tickets")
                        .HasForeignKey("Categoryid");

                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("Tickets")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.ITGroup", "ITGroup")
                        .WithMany("Tickets")
                        .HasForeignKey("ITGroupid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.Office", "Office")
                        .WithMany("Tickets")
                        .HasForeignKey("Officeid")
                        .OnDelete(DeleteBehavior.Cascade);
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7

                    b.HasOne("TicketingSystem.DAL.Models.Severity")
                        .WithMany("Tickets")
                        .HasForeignKey("Severityid");
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.TicketMinor", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.CategoryList", "CategoryList")
                        .WithMany("TicketMinors")
                        .HasForeignKey("CategoryListid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.Office", "Office")
                        .WithMany("TicketMinors")
                        .HasForeignKey("Officeid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany("TicketMinors")
                        .HasForeignKey("Requesterid")
<<<<<<< HEAD
                        .OnDelete(DeleteBehavior.Cascade);
=======
<<<<<<< HEAD
                        .OnDelete(DeleteBehavior.Restrict);
=======
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TicketingSystem.DAL.Models.TypeEmployee", b =>
                {
                    b.HasOne("TicketingSystem.DAL.Models.EmployeeEmployeeType", "EmployeeEmployeeType")
                        .WithMany("TypeEmployees")
                        .HasForeignKey("EmployeeEmployeeTypeid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TicketingSystem.DAL.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);
>>>>>>> 00d9a0867d956b23e7a3c0e36fce9ae308d939f7
>>>>>>> b91f36f85f748ef16088c8249afe1aa938eb57c2
                });
#pragma warning restore 612, 618
        }
    }
}
